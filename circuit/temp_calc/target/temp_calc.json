{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14296567708773880436,"abi":{"parameters":[{"name":"ships","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"Ship","fields":[{"name":"start_x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_y","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"end_x","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"end_y","type":{"kind":"integer","sign":"unsigned","width":8}}]}},"visibility":"private"},{"name":"salt","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"5ZpRa4MwFIX/S577kOTem0T/yhjFtrYIosXawSj979NhutbKRnGFsfMiXj0cTU5u+B5yUpt8ddwti2pbH1T6clJlvc7aoq666qSs/nx22GdVXx7arGlVys4uVF5tVCranBdqW5S5Sl13eyc1OqFBa4wJP4jZSxSLoYvY6gmx1cYMYqspfC8mm/AgJiJ/LX5dKGv+yShZx18mFh6P0kJkSRBZMkSWApGlg8jSQ2QZILJMELIkCPYhCPYhCPYhCPYhhsgSgn0Ign0Ign0Ign0Ign0Ygn0Ygn0Ygn0Ygn2YIbKEYB+GYB+GYB+GYB+GYB+BYB+BYB+BYB+BYB9hiCwh2Ecg2Ecg2Ecg2Ecg2MdBsI+DYB/3h9mHbIijJH8zyteuWDVFWRa75c1RNN1fzOSOar4mzWiSi53xE9/2Oq4Mb+y1tJsyE55rn8y3pxiJ52RkP31Y70H7uDq8o7G9mW8fkmif+LG9fa49zbYP1g3awONopw9kPWgfGyiIG9vLfHsfow33k+N+0T4ZrftzV71lTZGtyrzv5P7lsVrHxu7K9n0f38TW3zf1Ot8cm7zfBK76v1/ipBcknW1n/QE=","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"// calculate_commitment.nr\nuse std::hash;\n\n// A ship is defined by its start and end coordinates\nstruct Ship {\n    start_x: u8,\n    start_y: u8,\n    end_x: u8,\n    end_y: u8\n}\n\n// Return the board commitment as a public value\nfn main(\n    ships: [Ship; 5],  // Private: Ship positions\n    salt: Field,       // Private: Random salt for commitment\n) -> pub Field {      // Public return value will be the commitment\n    // Calculate and return the commitment\n    calculate_board_commitment(ships, salt)\n}\n\n// Calculate the board commitment using Pedersen hash - copied from your original circuit\nfn calculate_board_commitment(ships: [Ship; 5], salt: Field) -> Field {\n    // Flatten ship data for hashing\n    let mut data: [Field; 21] = [0; 21]; // 5 ships x 4 coordinates + 1 salt\n    \n    for i in 0..5 {\n        data[i*4] = ships[i].start_x as Field;\n        data[i*4 + 1] = ships[i].start_y as Field;\n        data[i*4 + 2] = ships[i].end_x as Field;\n        data[i*4 + 3] = ships[i].end_y as Field;\n    }\n    data[20] = salt;\n    \n    // Use the Pedersen hash from the standard library\n    hash::pedersen_hash(data)\n}","path":"/Users/lazerpay/Desktop/open-source/kripson/circuit/temp_calc/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint"]}